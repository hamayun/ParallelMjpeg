ENTRY (_start)
GROUP(-lc -lgcc)

MEMORY
{
	text :    ORIGIN = 0x00000000,    LENGTH = 0x01000000
	data :    ORIGIN = 0xE0000000,    LENGTH = 0x01000000
}

PHDRS
{
	reset PT_LOAD FILEHDR PHDRS ;
	excep PT_LOAD ;
	text PT_LOAD  ;
	data PT_LOAD ;
	heap PT_NULL ;
	stack PT_NULL ;
	debug PT_NULL ;
	bss PT_LOAD ;
}

SECTIONS
{
	.debug_aranges 0x0 : { *(.debug_aranges*) } :debug
	.debug_info 0x0 : { *(.debug_info*) } :debug
	.debug_abbrev 0x0 : { *(.debug_abbrev*) } :debug
	.debug_line 0x0 : { *(.debug_line*) } :debug
	.debug_ranges 0x0 : { *(.debug_ranges*) } :debug
	.debug_str 0x0 : { *(.debug_str*) } :debug
	.debug_frame 0x0 : { *(.debug_frame*) } :debug
	.debug_loc 0x0 : { *(.debug_loc*) } :debug
	.debug_pubnames 0x0 : { *(.debug_pubnames*) } :debug
	.comment 0x0 : { *(.comment*) } :debug
	.ARM.attributes 0x0 : { *(.ARM.attributes*) } :debug
	.reginfo 0x0 : { *(.reginfo*) } :debug

	.reset 0x00000000 : { *(.reset) } > text :text

	.excep ALIGN(8) : { *(.excep) } > text :text
	
	.init ALIGN(8) : { *(.init*) } > text	:text

	.ctors ALIGN(8) : { *(.ctors*) } > text	:text

	.text ALIGN(8) : { *(.text*) } > text	:text

	.fini ALIGN(8) : { *(.fini*) } > text	:text

	.dtors ALIGN(8) : { *(.dtors*) } > text	:text

	.jcr ALIGN(8) : { *(.jcr*) } > text	:text

	.sdata 0xE0000000 : { *(.sdata*) *(.scommon*) } > data :data

	.sbss ALIGN(0x8): { *(.sbss*) } > data :bss

	.rodata ALIGN(0x8) : { *(.rodata*) } > data	:data

	.data ALIGN(0x8) : { *(.data*) *(.glue_7*) *(.eh_frame*) } > data	:data

	.os_config ALIGN(0x8): {
		OS_N_DEVICES = .; LONG(0x2)
		OS_DEVICES_LIST = .; LONG(soclib_tty_module) LONG(generic_rdv_module)
		
		OS_N_FILESYSTEMS = .; LONG(0x2)
		OS_FILESYSTEMS_LIST = .; LONG(generic_devfs_module) LONG(bridgefs_module)

		OS_THREAD_STACK_SIZE = .; LONG(0x10000)

		OS_KERNEL_HEAP_ADDRESS = .; LONG(ADDR(.kheap))
		OS_KERNEL_HEAP_SIZE = .; LONG(ADDR(.kheap) - 0xE0000000 + 0x100000)
	} > data	:data

	.hal ALIGN(0x8): {
		PLATFORM_N_ARM7TDMI = .; LONG(0x1)
		PLATFORM_CLOCK_BASE = .; LONG(0xD0200000)
		PLATFORM_MAIN_CLOCK = .; LONG(100000000)
		APP_ENTRY_POINT = .; LONG(_main);

		PLATFORM_SPIN_ARRAY  = ADDR(.semram);
		CPU_OS_ENTRY_POINT = dna_start;

		CPU_SVC_STACK_ADDR  = ADDR(.sysstack);
		CPU_IRQ_STACK_ADDR  = ADDR(.irqstack);
		CPU_FIQ_STACK_ADDR  = ADDR(.fiqstack);

		CPU_BSS_START = .; LONG(ADDR(.bss))
		CPU_BSS_END = .; LONG(__hal_bss_end)

		SOCLIB_TTY_NDEV = .; LONG(0x1)
		SOCLIB_TTY_DEVICES = .; LONG(0XC0200000)

		__BRIDGEFS_NDEV = .; LONG(0x1)
		__BRIDGEFS_DEVICES = .; LONG(0XC2200000)

		GENERIC_RDV_NDEV = .; LONG(16);

	} > data	:data

	.sysstack ALIGN(0x8) + 0x10000 : { } > data	:stack
	.irqstack ALIGN(0x8) + 0x10000 : { } > data	:stack
	.fiqstack ALIGN(0x8) + 0x10000 : { } > data	:stack

	.bss ALIGN(0x8): {
		*(.bss*) *(.rel*) *(COMMON) CPU_SW_SPIN_ARRAY = .; . = . + 0x100; __hal_bss_end = .;
	} > data	:bss

	.kheap ALIGN(0x8) : {} > data	:heap

	.uheap ALIGN(0x8) + 0x100000: {_end = .;} > data :heap

	.semram 0xC1200000 : { }
}

